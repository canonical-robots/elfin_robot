<launch>

  <!-- This launch file provides a connection to Elfin robots
       using the standard ROS Industrial simple_message protocol.

       Several nodes are started, to supply both low-level robot communication
       and higher-level actionlib support:
         - robot_state : publishes current joint positions and robot state data
         - motion_download_interface : command robot motion by sending motion points to robot
         - joint_trajectory_action : actionlib interface to control robot motion
    Usage:
      robot_interface.launch robot_ip:=<value> 
  -->

  <!-- robot_ip: IP-address of the robot's server -->
  <!--arg name="robot_ip" doc="IP of the controller"/-->
  <!--arg name="robot_desc" doc="The urdf xml robot description"/--> 
  
  <!-- copy the specified arguments to the Parameter Server, for use by nodes below -->
  <!--param name="robot_ip_address" type="str" value="$(arg robot_ip)"/-->
  <!--param name=""robot_description" type="str" value="$(arg robot_desc)"/-->

  <!-- robot_state: publishes joint positions and robot-state data -->
  <node pkg="elfin_driver" type="robot_state" name="robot_state"/>
  
  <!-- motion_download_interface: sends robot motion commands by DOWNLOADING path to robot -->
  <!--node pkg="elfin_driver" type="motion_download_interface" name="motion_download_interface"/-->
  
  <!-- joint_trajectory_action: provides actionlib interface for high-level robot control -->
  <!--node pkg="industrial_robot_client" type="joint_trajectory_action" name="joint_trajectory_action"/-->

</launch>
